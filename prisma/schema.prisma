generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

enum InstanceType {
  mastodon
  misskey
  cherrypick
}

model user {
  id           Int      @id @default(autoincrement())
  account      String
  accountLower String
  hostName     String
  handle       String   @unique
  name         String[]
  token        String
  userId       String   @unique
  profile      profile?
  jwtIndex     Int      @default(0)

  blocking blocking[] @relation("blocks")
}

enum PostVisibility {
  public
  home
  followers
}

model profile {
  id                    Int            @id @default(autoincrement())
  answer                answer[]
  questions             question[]
  account               String
  handle                String         @unique
  name                  String[]
  stopNewQuestion       Boolean        @default(false)
  stopAnonQuestion      Boolean        @default(false)
  stopNotiNewQuestion   Boolean        @default(false)
  stopPostAnswer        Boolean        @default(false)
  avatarUrl             String
  questionBoxName       String         @default("질문함")
  user                  user           @relation(fields: [handle], references: [handle])
  defaultPostVisibility PostVisibility @default(public)
}

model answer {
  id                   String   @id @default(cuid())
  question             String
  questioner           String?
  answer               String
  answeredAt           DateTime @default(now())
  answeredPersonHandle String
  answeredPerson       profile  @relation(fields: [answeredPersonHandle], references: [handle])
  nsfwedAnswer         Boolean
}

model question {
  id               Int      @id @default(autoincrement())
  question         String
  questioner       String?
  questionee       profile  @relation(fields: [questioneeHandle], references: [handle])
  questioneeHandle String
  questionedAt     DateTime @default(now())
}

model server {
  id            Int          @id @default(autoincrement())
  instances     String       @unique /// Server 의 Hostname
  instanceType  InstanceType @default(misskey)
  appSecret     String? /// Misskey App인증의 Secret Key
  client_id     String? /// Mastodon OAuth2 client ID
  client_secret String? /// Mastodon OAuth2 client secret
}

model blocking {
  id            String   @id @default(cuid())
  blockeeHandle String   @db.VarChar(500)
  blockerHandle String   @db.VarChar(500)
  blocker       user     @relation("blocks", fields: [blockerHandle], references: [handle], onDelete: Cascade)
  createdAt     DateTime @default(now())
  hidden        Boolean  @default(false)

  @@unique([blockeeHandle, blockerHandle, hidden])
  @@index([blockerHandle, blockeeHandle, hidden, createdAt(sort: Desc)])
}
